# 应用全局唯一的身份标识
app.id=client
# Apollo Meta Eureka Server 地址
apollo.meta=http://192.168.68.130:8080
# 自定义本地配置文件缓存路径
# apollo.cacheDir = ./config
# 设置在应用启动阶段就加载 Apollo 配置
apollo.bootstrap.enabled = true
#将Apollo配置加载提到初始化日志系统之前。
apollo.bootstrap.eagerLoad.enabled = true
# 注入 application namespace
#apollo.bootstrap.namespaces = client
#apollo.cluster = platform-tw
#在将该项目 com.cmmplb目录下的日志，都采用info模式输出
logging.level.com.cmmplb=info

spring.profiles.active=dev
spring.application.name=@project.name@
spring.cloud.loadbalancer.cache.enabled=false
server.port=@project.prot@
server.address=@project.address@
server.servlet.context-path=/api/@project.artifactId@
server.tomcat.uri-encoding=UTF-8
server.tomcat.basedir=D:/Logs/tomcat/tmp
# 执行当前服务的应用id，标识的是每一个具体的的服务(不可以重复)
eureka.instance.instanceId=${spring.application.name}@${spring.cloud.client.ip-address}@${server.port}
# 当调用getHostname获取实例的hostname时，返回ip而不是host名称
eureka.instance.prefer-ip-address=true
# 每隔5s发送一次心跳
eureka.instance.lease-renewal-interval-in-seconds=5
# 告知服务端10秒还未收到心跳的话，就将该服务移除列表
eureka.instance.lease-expiration-duration-in-seconds=30
eureka.client.enabled=true
# 配置中的  defaultZone 必须是 驼峰格式，不能写成 default-zone，否则，无效。因为，eureka.client.service-url 是一个 Map类型。
eureka.client.service-url.defaultZone=http://192.168.68.130:8080/eureka
#true # 开启健康检查
eureka.client.healthcheck.enabled=false
# eureka client间隔多久去拉取服务器注册信息,默认为30秒
eureka.client.registry-fetch-interval-seconds=5
